/* The following code was generated by JFlex 1.4.1 on 11/5/21, 6:12 PM */

/*
 * Generated on 11/5/21, 6:12 PM
 */
package gui.editor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("all")
public class DuckSyntaxTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\52\1\15"+
    "\1\17\1\1\1\37\1\35\1\7\2\36\1\22\1\25\1\35\1\25"+
    "\1\23\1\21\1\4\3\4\4\6\2\3\1\43\1\35\1\54\1\53"+
    "\1\54\1\35\1\17\6\5\24\1\1\36\1\11\1\36\1\16\1\2"+
    "\1\0\1\31\1\14\1\51\1\45\1\24\1\30\1\47\1\40\1\42"+
    "\2\1\1\32\1\50\1\13\1\46\1\41\1\1\1\27\1\33\1\26"+
    "\1\12\1\1\1\44\3\1\1\34\1\16\1\34\1\35\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\2\7\5\1\1\10\7\1\1\7\1\11\1\12\5\11"+
    "\1\13\3\11\1\0\1\14\1\0\1\14\1\3\1\15"+
    "\1\0\1\3\1\1\2\5\1\16\1\17\1\20\1\21"+
    "\11\1\1\22\3\1\1\23\11\0\1\21\1\0\1\3"+
    "\1\24\2\3\1\15\1\3\1\1\1\5\1\25\1\5"+
    "\1\26\6\1\1\27\3\1\11\0\1\3\1\5\2\1"+
    "\1\30\3\1\2\0\1\31\2\0\1\32\1\0\1\3"+
    "\1\5\3\1\5\0\1\3\1\5\1\1\1\33\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\207"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\207\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\207\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u03de\0\u040b\0\207\0\u0438\0\u0465\0\u0492"+
    "\0\u04bf\0\u04ec\0\207\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd"+
    "\0\u01ef\0\u05fa\0\u0627\0\207\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\207\0\207\0\207\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\264\0\u08f7"+
    "\0\u0924\0\u0951\0\207\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\207"+
    "\0\u0b9a\0\u0bc7\0\u0654\0\u0bf4\0\u0c21\0\u0c4e\0\207\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\264"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e"+
    "\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086"+
    "\0\264\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1194\0\u1383\0\u121b\0\u13b0\0\u13dd\0\u140a\0\u1437"+
    "\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\6\1\7\1\10\1\4"+
    "\2\5\1\11\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\1\17\1\15\1\20\1\5\1\21\2\5\1\22\1\23"+
    "\1\4\1\23\1\15\1\5\1\24\1\25\1\4\1\26"+
    "\1\27\1\30\2\5\1\31\1\32\2\33\10\34\1\35"+
    "\11\34\1\36\5\34\1\37\7\34\1\40\3\34\1\41"+
    "\10\34\10\42\1\43\17\42\1\44\7\42\1\45\3\42"+
    "\1\46\10\42\56\0\6\5\2\0\1\47\3\5\7\0"+
    "\1\5\1\0\6\5\4\0\3\5\1\0\6\5\3\0"+
    "\3\50\2\6\1\50\1\6\2\0\4\50\2\0\1\50"+
    "\3\0\1\51\1\52\1\0\6\50\4\0\3\50\1\0"+
    "\6\50\3\0\7\53\1\54\1\55\1\56\43\53\1\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\6\5"+
    "\4\0\3\5\1\0\2\5\1\57\3\5\3\0\10\12"+
    "\1\60\1\61\3\12\1\62\37\12\20\0\1\13\55\0"+
    "\1\63\1\64\35\0\2\65\1\0\1\65\47\0\6\5"+
    "\2\0\1\47\1\5\1\66\1\5\7\0\1\5\1\0"+
    "\4\5\1\67\1\5\4\0\3\5\1\0\6\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\1\5"+
    "\1\70\4\5\4\0\3\5\1\0\6\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\3\5\1\71"+
    "\1\72\1\5\4\0\3\5\1\0\2\5\1\73\3\5"+
    "\4\0\6\5\2\0\1\47\3\5\7\0\1\5\1\0"+
    "\1\74\5\5\4\0\3\5\1\0\6\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\1\5\1\75"+
    "\4\5\4\0\3\5\1\0\6\5\4\0\6\5\2\0"+
    "\1\47\1\5\1\76\1\5\7\0\1\5\1\0\2\5"+
    "\1\77\3\5\4\0\3\5\1\0\6\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\6\5\4\0"+
    "\1\100\2\5\1\0\6\5\4\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\2\5\1\77\3\5\4\0\6\5\2\0\1\47\1\101"+
    "\2\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\6\5\4\0\6\5\2\0\1\47\3\5\7\0\1\5"+
    "\1\0\6\5\4\0\1\102\2\5\1\0\6\5\56\0"+
    "\1\15\1\0\10\34\1\0\11\34\1\0\5\34\1\0"+
    "\7\34\1\0\3\34\1\0\10\34\21\0\1\103\61\0"+
    "\1\104\13\0\1\105\40\0\1\106\72\0\1\107\10\0"+
    "\10\42\1\0\17\42\1\0\7\42\1\0\3\42\1\0"+
    "\10\42\26\0\1\110\13\0\1\111\40\0\1\112\72\0"+
    "\1\113\22\0\1\114\42\0\7\50\2\0\4\50\2\0"+
    "\1\50\4\0\1\50\1\0\6\50\4\0\3\50\1\0"+
    "\6\50\3\0\3\50\2\115\1\50\1\115\2\0\4\50"+
    "\2\0\1\50\4\0\1\50\1\116\6\50\4\0\3\50"+
    "\1\0\6\50\3\0\7\117\1\120\1\0\44\117\7\0"+
    "\1\120\45\0\4\117\1\121\1\117\1\122\1\123\1\0"+
    "\1\53\1\124\3\53\10\117\3\53\24\117\1\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\6\5\4\0"+
    "\3\5\1\0\2\5\1\125\3\5\3\0\11\60\1\126"+
    "\3\60\1\127\43\60\1\12\1\60\2\12\1\0\1\12"+
    "\1\130\3\12\10\60\3\12\24\60\3\50\2\65\1\50"+
    "\1\65\2\0\4\50\2\0\1\50\4\0\1\52\1\0"+
    "\6\50\4\0\3\50\1\0\6\50\4\0\6\5\2\0"+
    "\1\47\3\5\7\0\1\5\1\0\6\5\4\0\3\5"+
    "\1\0\1\5\1\131\4\5\4\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\5\5\1\132\4\0\3\5"+
    "\1\0\6\5\4\0\6\5\2\0\1\47\1\133\2\5"+
    "\7\0\1\5\1\0\6\5\4\0\3\5\1\0\6\5"+
    "\4\0\6\5\2\0\1\47\3\5\7\0\1\5\1\0"+
    "\4\5\1\134\1\5\4\0\3\5\1\0\6\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\6\5"+
    "\4\0\3\5\1\0\2\5\1\135\3\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\1\5\1\77"+
    "\4\5\4\0\3\5\1\0\6\5\4\0\6\5\2\0"+
    "\1\47\3\5\7\0\1\5\1\0\1\5\1\136\4\5"+
    "\4\0\3\5\1\0\6\5\4\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\2\5\1\137\3\5\4\0\6\5\2\0\1\47\3\5"+
    "\7\0\1\5\1\0\1\140\5\5\4\0\3\5\1\0"+
    "\6\5\4\0\6\5\2\0\1\47\3\5\7\0\1\5"+
    "\1\0\6\5\4\0\2\5\1\141\1\0\6\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\1\142"+
    "\5\5\4\0\3\5\1\0\6\5\4\0\6\5\2\0"+
    "\1\47\3\5\7\0\1\5\1\0\3\5\1\143\2\5"+
    "\4\0\3\5\1\0\6\5\44\0\1\144\45\0\1\145"+
    "\50\0\1\146\72\0\1\147\51\0\1\150\45\0\1\151"+
    "\50\0\1\152\72\0\1\153\13\0\4\154\5\0\1\154"+
    "\7\0\1\154\3\0\2\154\13\0\1\154\3\0\1\154"+
    "\3\0\3\50\2\115\1\50\1\115\2\0\4\50\2\0"+
    "\1\50\4\0\1\50\1\0\6\50\4\0\3\50\1\0"+
    "\6\50\6\0\2\115\1\0\1\115\46\0\7\117\1\54"+
    "\1\0\50\117\1\122\1\117\1\122\1\120\1\0\50\117"+
    "\1\53\1\117\1\53\1\120\1\0\47\117\4\155\1\54"+
    "\1\0\3\117\1\155\7\117\1\155\3\117\2\155\13\117"+
    "\1\155\3\117\1\155\3\117\1\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\4\5\1\140\1\5\4\0"+
    "\3\5\1\0\6\5\3\0\10\60\1\0\47\60\4\156"+
    "\2\60\1\126\2\60\1\156\1\127\6\60\1\156\3\60"+
    "\2\156\13\60\1\156\3\60\1\156\3\60\1\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\2\5\1\157"+
    "\3\5\4\0\2\5\1\160\1\0\1\26\5\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\77\1\0\6\5"+
    "\4\0\3\5\1\0\6\5\4\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\161\1\0\6\5\4\0\3\5\1\0"+
    "\6\5\4\0\6\5\2\0\1\47\3\5\7\0\1\5"+
    "\1\0\5\5\1\133\4\0\3\5\1\0\6\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\3\5"+
    "\1\76\2\5\4\0\3\5\1\0\6\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\6\5\4\0"+
    "\2\5\1\162\1\0\6\5\4\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\3\5\1\163\2\5\4\0\6\5\2\0\1\47\3\5"+
    "\7\0\1\5\1\0\4\5\1\132\1\5\4\0\3\5"+
    "\1\0\6\5\4\0\6\5\2\0\1\47\3\5\7\0"+
    "\1\5\1\0\6\5\4\0\1\5\1\164\1\5\1\0"+
    "\6\5\4\0\6\5\2\0\1\47\3\5\7\0\1\5"+
    "\1\0\1\5\1\140\4\5\4\0\3\5\1\0\6\5"+
    "\46\0\1\165\35\0\1\144\71\0\1\166\36\0\1\167"+
    "\74\0\1\170\35\0\1\150\71\0\1\171\36\0\1\172"+
    "\34\0\4\173\5\0\1\173\7\0\1\173\3\0\2\173"+
    "\13\0\1\173\3\0\1\173\3\0\3\117\4\174\1\54"+
    "\1\0\3\117\1\174\7\117\1\174\3\117\2\174\13\117"+
    "\1\174\3\117\1\174\3\117\3\60\4\175\2\60\1\126"+
    "\2\60\1\175\1\127\6\60\1\175\3\60\2\175\13\60"+
    "\1\175\3\60\1\175\3\60\1\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\2\5\1\73\3\5\4\0\6\5\2\0\1\47\3\5"+
    "\7\0\1\5\1\0\2\5\1\77\3\5\4\0\3\5"+
    "\1\0\6\5\4\0\6\5\2\0\1\47\1\5\1\176"+
    "\1\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\6\5\4\0\6\5\2\0\1\47\3\5\7\0\1\5"+
    "\1\0\1\5\1\177\4\5\4\0\3\5\1\0\6\5"+
    "\4\0\6\5\2\0\1\47\1\200\2\5\7\0\1\5"+
    "\1\0\6\5\4\0\3\5\1\0\6\5\24\0\1\201"+
    "\66\0\1\144\7\0\1\165\12\0\1\167\1\202\4\167"+
    "\1\202\2\0\3\167\2\0\1\202\1\0\1\167\2\202"+
    "\1\167\1\202\6\167\1\0\3\202\3\167\1\202\6\167"+
    "\2\202\22\0\1\203\66\0\1\150\7\0\1\170\12\0"+
    "\1\172\1\204\4\172\1\204\2\0\3\172\2\0\1\204"+
    "\1\0\1\172\2\204\1\172\1\204\6\172\1\0\3\204"+
    "\3\172\1\204\6\172\2\204\4\0\4\205\5\0\1\205"+
    "\7\0\1\205\3\0\2\205\13\0\1\205\3\0\1\205"+
    "\3\0\3\117\4\206\1\54\1\0\3\117\1\206\7\117"+
    "\1\206\3\117\2\206\13\117\1\206\3\117\1\206\3\117"+
    "\3\60\4\207\2\60\1\126\2\60\1\207\1\127\6\60"+
    "\1\207\3\60\2\207\13\60\1\207\3\60\1\207\3\60"+
    "\1\0\6\5\2\0\1\47\3\5\7\0\1\5\1\0"+
    "\6\5\4\0\3\5\1\0\3\5\1\140\2\5\4\0"+
    "\6\5\2\0\1\47\3\5\7\0\1\5\1\0\3\5"+
    "\1\210\2\5\4\0\3\5\1\0\6\5\4\0\6\5"+
    "\2\0\1\47\3\5\7\0\1\5\1\0\1\211\5\5"+
    "\4\0\3\5\1\0\6\5\24\0\1\167\54\0\1\172"+
    "\36\0\4\5\5\0\1\5\7\0\1\5\3\0\2\5"+
    "\13\0\1\5\3\0\1\5\3\0\3\117\4\53\1\54"+
    "\1\0\3\117\1\53\7\117\1\53\3\117\2\53\13\117"+
    "\1\53\3\117\1\53\3\117\3\60\4\12\2\60\1\126"+
    "\2\60\1\12\1\127\6\60\1\12\3\60\2\12\13\60"+
    "\1\12\3\60\1\12\3\60\1\0\6\5\2\0\1\47"+
    "\3\5\7\0\1\5\1\0\6\5\4\0\3\5\1\0"+
    "\4\5\1\212\1\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\4\1\1\11\5\1\1\11"+
    "\11\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\0\4\1\3\11\16\1\1\11\11\0"+
    "\1\1\1\0\1\1\1\11\6\1\1\11\14\1\11\0"+
    "\10\1\2\0\1\1\2\0\1\1\1\0\5\1\5\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public DuckSyntaxTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DuckSyntaxTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DuckSyntaxTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 20: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 29: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 30: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 31: break;
        case 21: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 32: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 33: break;
        case 22: 
          { addToken(Token.RESERVED_WORD);
          }
        case 34: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 35: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 36: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 37: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 38: break;
        case 27: 
          { addToken(Token.FUNCTION);
          }
        case 39: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 40: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 41: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 42: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 43: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 44: break;
        case 24: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 45: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 46: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 47: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 48: break;
        case 18: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 49: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 9: 
          { 
          }
        case 53: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 139: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 140: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 141: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
