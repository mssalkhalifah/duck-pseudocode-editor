
%name GrxParser
%algo CLR

program = STARTINPUT COLON statement ENDINPUT;

statement = decl;
statement = func_def;
statement = expr_stmt;
statement = select_stmt;
statement = loop_stmt;

func_def = OUT OPENPA prime_expr CLOSEPA SEMICOL;

loop_stmt = WHILE OPENPA expr CLOSEPA statement ENDWHILE;

select_stmt = IF OPENPA expr CLOSEPA COLON statement ENDIF;
select_stmt = IF OPENPA expr CLOSEPA COLON statement ENDIF ELSE statement;

expr_stmt = expr SEMICOL;
expr_stmt = SEMICOL;

expr = assign_expr;

decl = ID COLON type assign_expr;

type = INT;
type = STR;
type = FLOAT;
type = BOOL;
type = CHAR;

assign_expr = conditional_expr;
assign_expr = assign_op unary_expr assign_expr;

conditional_expr = logical_or_expr;

logical_or_expr = logical_and_expr;
logical_or_expr = logical_or_expr OR logical_and_expr;

logical_and_expr = equality_expr;
logical_and_expr = logical_and_expr AND equality_expr;

equality_expr = relational_expr;
equality_expr = equality_expr EQ relational_expr;
equality_expr = equality_expr NE relational_expr;

relational_expr = add_expr;
relational_expr = relational_expr LT add_expr;
relational_expr = relational_expr GT add_expr;
relational_expr = relational_expr GE add_expr;
relational_expr = relational_expr LE add_expr;

add_expr = mult_expr;
add_expr = add_expr PLUS mult_expr;
add_expr = add_expr SUB mult_expr;

mult_expr = cast_expr;
mult_expr = mult_expr MUL cast_expr;
mult_expr = mult_expr DIV cast_expr;
mult_expr = mult_expr MOD cast_expr;

cast_expr = unary_expr;
cast_expr = OPENPA type CLOSEPA cast_expr;

assign_op = ASSIGN;

unary_expr = prime_expr;

prime_expr = ID;
prime_expr = NUM_CONST;
prime_expr = STR_CONST;
prime_expr = CHAR_CONST;
prime_expr = BOOL_CONST;
prime_expr = OPENPA expr CLOSEPA;
