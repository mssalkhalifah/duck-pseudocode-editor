%name GrxParser
%algo CLR

program = STARTINPUT COLON compound_stmt ENDINPUT;

compound_stmt = stmt_list;
compound_stmt = ;

decl = ID(id) COLON type(type) ASSIGN conditional_expr(value) SEMICOL; {symbolTable.setAttribute(id, type, value);}

stmt_list = statement;
stmt_list = stmt_list statement;

statement = expr_stmt;
statement = select_stmt;
statement = loop_stmt;
statement = decl;
statement = per_def_func;

per_def_func = OUT OPENPA expr CLOSEPA SEMICOL;

expr_stmt = expr SEMICOL;
expr_stmt = SEMICOL;

select_stmt = IF OPENPA expr CLOSEPA COLON compound_stmt ENIF;
select_stmt = IF OPENPA expr CLOSEPA COLON compound_stmt ELSE COLON compound_stmt ENIF;

loop_stmt = WHILE OPENPA expr CLOSEPA COLON compound_stmt ENDWHILE;
loop_stmt = DO COLON compound_stmt ENDDO OPENPA expr CLOSEPA;
loop_stmt = FOR OPENPA opt_expr SEMICOL opt_expr SEMICOL opt_expr CLOSEPA COLON compound_stmt ENDFOR;

opt_expr = expr;
opt_expr = ;

expr = assign_expr;

type = INT;
type = STR;
type = FLOAT;
type = BOOL;
type = CHAR;

assign_expr = conditional_expr;
assign_expr = unary_expr assign_op assign_expr;

conditional_expr = logical_or_expr;

logical_or_expr = logical_and_expr;
logical_or_expr = logical_or_expr OR logical_and_expr;

logical_and_expr = equality_expr;
logical_and_expr = logical_and_expr AND equality_expr;

equality_expr = relational_expr;
equality_expr = equality_expr EQ relational_expr;
equality_expr = equality_expr NE relational_expr;

relational_expr = add_expr;
relational_expr = relational_expr LT add_expr;
relational_expr = relational_expr GT add_expr;
relational_expr = relational_expr GE add_expr;
relational_expr = relational_expr LE add_expr;

add_expr = mult_expr;
add_expr = add_expr PLUS mult_expr;
add_expr = add_expr SUB mult_expr;

mult_expr = cast_expr;
mult_expr = mult_expr MUL cast_expr;
mult_expr = mult_expr DIV cast_expr;
mult_expr = mult_expr MOD cast_expr;

cast_expr = unary_expr;
cast_expr = OPENPA type CLOSEPA cast_expr;

assign_op = ASSIGN;

unary_op = NOT;
unary_op = UNARY_INCREMENT;
unary_op = UNARY_DECREMENT;

unary_expr = prime_expr;
unary_expr = unary_op cast_expr;

prime_expr = ID;
prime_expr = NUM_CONST;
prime_expr = STR_CONST;
prime_expr = CHAR_CONST;
prime_expr = BOOL_CONST;
prime_expr = OPENPA expr CLOSEPA;
